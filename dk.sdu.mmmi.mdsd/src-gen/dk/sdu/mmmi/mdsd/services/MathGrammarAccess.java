/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MathGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.Math");
		private final Assignment cLinesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLinesMathExpParserRuleCall_0 = (RuleCall)cLinesAssignment.eContents().get(0);
		
		//Math:
		//    lines += MathExp+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//lines += MathExp+
		public Assignment getLinesAssignment() { return cLinesAssignment; }
		
		//MathExp
		public RuleCall getLinesMathExpParserRuleCall_0() { return cLinesMathExpParserRuleCall_0; }
	}
	public class MathExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.MathExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueAssignmentParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//MathExp:
		//    'var' value=Assignment
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' value=Assignment
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//value=Assignment
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Assignment
		public RuleCall getValueAssignmentParserRuleCall_1_0() { return cValueAssignmentParserRuleCall_1_0; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpExpParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		
		//Assignment:
		//    {Assignment} name=ID '=' exp=Exp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Assignment} name=ID '=' exp=Exp
		public Group getGroup() { return cGroup; }
		
		//{Assignment}
		public Action getAssignmentAction_0() { return cAssignmentAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//exp=Exp
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_3_0() { return cExpExpParserRuleCall_3_0; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.Exp");
		private final RuleCall cSubAddExpParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Exp returns Expression:
		//    SubAddExp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SubAddExp
		public RuleCall getSubAddExpParserRuleCall() { return cSubAddExpParserRuleCall; }
	}
	public class SubAddExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.SubAddExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDivMultExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cSubtractionLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cAdditionLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightDivMultExpParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		////Reverse PMDAS
		//SubAddExp returns Expression:
		//    DivMultExp (('-' {Subtraction .left=current} | '+' {Addition.left=current})  right=DivMultExp)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//DivMultExp (('-' {Subtraction .left=current} | '+' {Addition.left=current})  right=DivMultExp)*
		public Group getGroup() { return cGroup; }
		
		//DivMultExp
		public RuleCall getDivMultExpParserRuleCall_0() { return cDivMultExpParserRuleCall_0; }
		
		//(('-' {Subtraction .left=current} | '+' {Addition.left=current})  right=DivMultExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('-' {Subtraction .left=current} | '+' {Addition.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'-' {Subtraction .left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_0_0() { return cHyphenMinusKeyword_1_0_0_0; }
		
		//{Subtraction .left=current}
		public Action getSubtractionLeftAction_1_0_0_1() { return cSubtractionLeftAction_1_0_0_1; }
		
		//'+' {Addition.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_1_0() { return cPlusSignKeyword_1_0_1_0; }
		
		//{Addition.left=current}
		public Action getAdditionLeftAction_1_0_1_1() { return cAdditionLeftAction_1_0_1_1; }
		
		//right=DivMultExp
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//DivMultExp
		public RuleCall getRightDivMultExpParserRuleCall_1_1_0() { return cRightDivMultExpParserRuleCall_1_1_0; }
	}
	public class DivMultExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.DivMultExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cDivisionLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cMultiplicationLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//DivMultExp returns Expression:
		//    Primary (('/' {Division.left=current} | '*' {Multiplication.left=current}) right=Primary)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary (('/' {Division.left=current} | '*' {Multiplication.left=current}) right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(('/' {Division.left=current} | '*' {Multiplication.left=current}) right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('/' {Division.left=current} | '*' {Multiplication.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'/' {Division.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_0_0() { return cSolidusKeyword_1_0_0_0; }
		
		//{Division.left=current}
		public Action getDivisionLeftAction_1_0_0_1() { return cDivisionLeftAction_1_0_0_1; }
		
		//'*' {Multiplication.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_1_0() { return cAsteriskKeyword_1_0_1_0; }
		
		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0_1_1() { return cMultiplicationLeftAction_1_0_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_0() { return cRightPrimaryParserRuleCall_1_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParenthesisParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableUseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLetParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Primary returns Expression:
		//    Number | Parenthesis | VariableUse | Let
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Number | Parenthesis | VariableUse | Let
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Number
		public RuleCall getNumberParserRuleCall_0() { return cNumberParserRuleCall_0; }
		
		//Parenthesis
		public RuleCall getParenthesisParserRuleCall_1() { return cParenthesisParserRuleCall_1; }
		
		//VariableUse
		public RuleCall getVariableUseParserRuleCall_2() { return cVariableUseParserRuleCall_2; }
		
		//Let
		public RuleCall getLetParserRuleCall_3() { return cLetParserRuleCall_3; }
	}
	public class ParenthesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.Parenthesis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parenthesis returns Expression:
		//    '(' Exp ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Exp ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//Exp
		public RuleCall getExpParserRuleCall_1() { return cExpParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Number returns Expression:
		//    {Number} value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number} value=INT
		public Group getGroup() { return cGroup; }
		
		//{Number}
		public Action getNumberAction_0() { return cNumberAction_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class VariableUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.VariableUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarUseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefAssignmentCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefAssignmentIDTerminalRuleCall_1_0_1 = (RuleCall)cRefAssignmentCrossReference_1_0.eContents().get(1);
		
		//VariableUse returns Expression:
		//    {VarUse} ref = [Assignment]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{VarUse} ref = [Assignment]
		public Group getGroup() { return cGroup; }
		
		//{VarUse}
		public Action getVarUseAction_0() { return cVarUseAction_0; }
		
		//ref = [Assignment]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[Assignment]
		public CrossReference getRefAssignmentCrossReference_1_0() { return cRefAssignmentCrossReference_1_0; }
		
		//ID
		public RuleCall getRefAssignmentIDTerminalRuleCall_1_0_1() { return cRefAssignmentIDTerminalRuleCall_1_0_1; }
	}
	public class LetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.Let");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAssignmentParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpExpParserRuleCall_4_0 = (RuleCall)cExpAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Let :
		//    {Let} 'let' value=Assignment 'in' exp=Exp 'end'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Let} 'let' value=Assignment 'in' exp=Exp 'end'
		public Group getGroup() { return cGroup; }
		
		//{Let}
		public Action getLetAction_0() { return cLetAction_0; }
		
		//'let'
		public Keyword getLetKeyword_1() { return cLetKeyword_1; }
		
		//value=Assignment
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Assignment
		public RuleCall getValueAssignmentParserRuleCall_2_0() { return cValueAssignmentParserRuleCall_2_0; }
		
		//'in'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//exp=Exp
		public Assignment getExpAssignment_4() { return cExpAssignment_4; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_4_0() { return cExpExpParserRuleCall_4_0; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	
	
	private final MathElements pMath;
	private final MathExpElements pMathExp;
	private final AssignmentElements pAssignment;
	private final ExpElements pExp;
	private final SubAddExpElements pSubAddExp;
	private final DivMultExpElements pDivMultExp;
	private final PrimaryElements pPrimary;
	private final ParenthesisElements pParenthesis;
	private final NumberElements pNumber;
	private final VariableUseElements pVariableUse;
	private final LetElements pLet;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MathGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMath = new MathElements();
		this.pMathExp = new MathExpElements();
		this.pAssignment = new AssignmentElements();
		this.pExp = new ExpElements();
		this.pSubAddExp = new SubAddExpElements();
		this.pDivMultExp = new DivMultExpElements();
		this.pPrimary = new PrimaryElements();
		this.pParenthesis = new ParenthesisElements();
		this.pNumber = new NumberElements();
		this.pVariableUse = new VariableUseElements();
		this.pLet = new LetElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.mmmi.mdsd.Math".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Math:
	//    lines += MathExp+
	//;
	public MathElements getMathAccess() {
		return pMath;
	}
	
	public ParserRule getMathRule() {
		return getMathAccess().getRule();
	}
	
	//MathExp:
	//    'var' value=Assignment
	//;
	public MathExpElements getMathExpAccess() {
		return pMathExp;
	}
	
	public ParserRule getMathExpRule() {
		return getMathExpAccess().getRule();
	}
	
	//Assignment:
	//    {Assignment} name=ID '=' exp=Exp
	//;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Exp returns Expression:
	//    SubAddExp
	//;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	////Reverse PMDAS
	//SubAddExp returns Expression:
	//    DivMultExp (('-' {Subtraction .left=current} | '+' {Addition.left=current})  right=DivMultExp)*
	//;
	public SubAddExpElements getSubAddExpAccess() {
		return pSubAddExp;
	}
	
	public ParserRule getSubAddExpRule() {
		return getSubAddExpAccess().getRule();
	}
	
	//DivMultExp returns Expression:
	//    Primary (('/' {Division.left=current} | '*' {Multiplication.left=current}) right=Primary)*
	//;
	public DivMultExpElements getDivMultExpAccess() {
		return pDivMultExp;
	}
	
	public ParserRule getDivMultExpRule() {
		return getDivMultExpAccess().getRule();
	}
	
	//Primary returns Expression:
	//    Number | Parenthesis | VariableUse | Let
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Parenthesis returns Expression:
	//    '(' Exp ')'
	//;
	public ParenthesisElements getParenthesisAccess() {
		return pParenthesis;
	}
	
	public ParserRule getParenthesisRule() {
		return getParenthesisAccess().getRule();
	}
	
	//Number returns Expression:
	//    {Number} value=INT
	//;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//VariableUse returns Expression:
	//    {VarUse} ref = [Assignment]
	//;
	public VariableUseElements getVariableUseAccess() {
		return pVariableUse;
	}
	
	public ParserRule getVariableUseRule() {
		return getVariableUseAccess().getRule();
	}
	
	//Let :
	//    {Let} 'let' value=Assignment 'in' exp=Exp 'end'
	//;
	public LetElements getLetAccess() {
		return pLet;
	}
	
	public ParserRule getLetRule() {
		return getLetAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
