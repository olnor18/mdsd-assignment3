/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.serializer;

import com.google.inject.Inject;
import dk.sdu.mmmi.mdsd.math.Addition;
import dk.sdu.mmmi.mdsd.math.Assignment;
import dk.sdu.mmmi.mdsd.math.Division;
import dk.sdu.mmmi.mdsd.math.Let;
import dk.sdu.mmmi.mdsd.math.MathExp;
import dk.sdu.mmmi.mdsd.math.MathPackage;
import dk.sdu.mmmi.mdsd.math.Multiplication;
import dk.sdu.mmmi.mdsd.math.Subtraction;
import dk.sdu.mmmi.mdsd.math.VarUse;
import dk.sdu.mmmi.mdsd.services.MathGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MathSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MathGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MathPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MathPackage.ADDITION:
				sequence_SubAddExp(context, (Addition) semanticObject); 
				return; 
			case MathPackage.ASSIGNMENT:
				sequence_Assignment(context, (Assignment) semanticObject); 
				return; 
			case MathPackage.DIVISION:
				sequence_DivMultExp(context, (Division) semanticObject); 
				return; 
			case MathPackage.LET:
				sequence_Let(context, (Let) semanticObject); 
				return; 
			case MathPackage.MATH:
				sequence_Math(context, (dk.sdu.mmmi.mdsd.math.Math) semanticObject); 
				return; 
			case MathPackage.MATH_EXP:
				sequence_MathExp(context, (MathExp) semanticObject); 
				return; 
			case MathPackage.MULTIPLICATION:
				sequence_DivMultExp(context, (Multiplication) semanticObject); 
				return; 
			case MathPackage.NUMBER:
				sequence_Number(context, (dk.sdu.mmmi.mdsd.math.Number) semanticObject); 
				return; 
			case MathPackage.SUBTRACTION:
				sequence_SubAddExp(context, (Subtraction) semanticObject); 
				return; 
			case MathPackage.VAR_USE:
				sequence_VariableUse(context, (VarUse) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Assignment returns Assignment
	 *
	 * Constraint:
	 *     (name=ID exp=Exp)
	 */
	protected void sequence_Assignment(ISerializationContext context, Assignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.ASSIGNMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.ASSIGNMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.ASSIGNMENT__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.ASSIGNMENT__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignmentAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAssignmentAccess().getExpExpParserRuleCall_3_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Division
	 *     SubAddExp returns Division
	 *     SubAddExp.Subtraction_1_0_0_1 returns Division
	 *     SubAddExp.Addition_1_0_1_1 returns Division
	 *     DivMultExp returns Division
	 *     DivMultExp.Division_1_0_0_1 returns Division
	 *     DivMultExp.Multiplication_1_0_1_1 returns Division
	 *     Primary returns Division
	 *     Parenthesis returns Division
	 *
	 * Constraint:
	 *     (left=DivMultExp_Division_1_0_0_1 right=Primary)
	 */
	protected void sequence_DivMultExp(ISerializationContext context, Division semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.DIVISION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.DIVISION__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.DIVISION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.DIVISION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDivMultExpAccess().getDivisionLeftAction_1_0_0_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getDivMultExpAccess().getRightPrimaryParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Multiplication
	 *     SubAddExp returns Multiplication
	 *     SubAddExp.Subtraction_1_0_0_1 returns Multiplication
	 *     SubAddExp.Addition_1_0_1_1 returns Multiplication
	 *     DivMultExp returns Multiplication
	 *     DivMultExp.Division_1_0_0_1 returns Multiplication
	 *     DivMultExp.Multiplication_1_0_1_1 returns Multiplication
	 *     Primary returns Multiplication
	 *     Parenthesis returns Multiplication
	 *
	 * Constraint:
	 *     (left=DivMultExp_Multiplication_1_0_1_1 right=Primary)
	 */
	protected void sequence_DivMultExp(ISerializationContext context, Multiplication semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.MULTIPLICATION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.MULTIPLICATION__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.MULTIPLICATION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.MULTIPLICATION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDivMultExpAccess().getMultiplicationLeftAction_1_0_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getDivMultExpAccess().getRightPrimaryParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Let
	 *     SubAddExp returns Let
	 *     SubAddExp.Subtraction_1_0_0_1 returns Let
	 *     SubAddExp.Addition_1_0_1_1 returns Let
	 *     DivMultExp returns Let
	 *     DivMultExp.Division_1_0_0_1 returns Let
	 *     DivMultExp.Multiplication_1_0_1_1 returns Let
	 *     Primary returns Let
	 *     Parenthesis returns Let
	 *     Let returns Let
	 *
	 * Constraint:
	 *     (value=Assignment exp=Exp)
	 */
	protected void sequence_Let(ISerializationContext context, Let semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.LET__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.LET__VALUE));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.LET__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.LET__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLetAccess().getValueAssignmentParserRuleCall_2_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getLetAccess().getExpExpParserRuleCall_4_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MathExp returns MathExp
	 *
	 * Constraint:
	 *     value=Assignment
	 */
	protected void sequence_MathExp(ISerializationContext context, MathExp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.MATH_EXP__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.MATH_EXP__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMathExpAccess().getValueAssignmentParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Math returns Math
	 *
	 * Constraint:
	 *     lines+=MathExp+
	 */
	protected void sequence_Math(ISerializationContext context, dk.sdu.mmmi.mdsd.math.Math semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Number
	 *     SubAddExp returns Number
	 *     SubAddExp.Subtraction_1_0_0_1 returns Number
	 *     SubAddExp.Addition_1_0_1_1 returns Number
	 *     DivMultExp returns Number
	 *     DivMultExp.Division_1_0_0_1 returns Number
	 *     DivMultExp.Multiplication_1_0_1_1 returns Number
	 *     Primary returns Number
	 *     Parenthesis returns Number
	 *     Number returns Number
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Number(ISerializationContext context, dk.sdu.mmmi.mdsd.math.Number semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.NUMBER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.NUMBER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Addition
	 *     SubAddExp returns Addition
	 *     SubAddExp.Subtraction_1_0_0_1 returns Addition
	 *     SubAddExp.Addition_1_0_1_1 returns Addition
	 *     DivMultExp returns Addition
	 *     DivMultExp.Division_1_0_0_1 returns Addition
	 *     DivMultExp.Multiplication_1_0_1_1 returns Addition
	 *     Primary returns Addition
	 *     Parenthesis returns Addition
	 *
	 * Constraint:
	 *     (left=SubAddExp_Addition_1_0_1_1 right=DivMultExp)
	 */
	protected void sequence_SubAddExp(ISerializationContext context, Addition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.ADDITION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.ADDITION__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.ADDITION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.ADDITION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSubAddExpAccess().getAdditionLeftAction_1_0_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getSubAddExpAccess().getRightDivMultExpParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Subtraction
	 *     SubAddExp returns Subtraction
	 *     SubAddExp.Subtraction_1_0_0_1 returns Subtraction
	 *     SubAddExp.Addition_1_0_1_1 returns Subtraction
	 *     DivMultExp returns Subtraction
	 *     DivMultExp.Division_1_0_0_1 returns Subtraction
	 *     DivMultExp.Multiplication_1_0_1_1 returns Subtraction
	 *     Primary returns Subtraction
	 *     Parenthesis returns Subtraction
	 *
	 * Constraint:
	 *     (left=SubAddExp_Subtraction_1_0_0_1 right=DivMultExp)
	 */
	protected void sequence_SubAddExp(ISerializationContext context, Subtraction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.SUBTRACTION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.SUBTRACTION__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.SUBTRACTION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.SUBTRACTION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSubAddExpAccess().getSubtractionLeftAction_1_0_0_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getSubAddExpAccess().getRightDivMultExpParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns VarUse
	 *     SubAddExp returns VarUse
	 *     SubAddExp.Subtraction_1_0_0_1 returns VarUse
	 *     SubAddExp.Addition_1_0_1_1 returns VarUse
	 *     DivMultExp returns VarUse
	 *     DivMultExp.Division_1_0_0_1 returns VarUse
	 *     DivMultExp.Multiplication_1_0_1_1 returns VarUse
	 *     Primary returns VarUse
	 *     Parenthesis returns VarUse
	 *     VariableUse returns VarUse
	 *
	 * Constraint:
	 *     ref=[Assignment|ID]
	 */
	protected void sequence_VariableUse(ISerializationContext context, VarUse semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.VAR_USE__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.VAR_USE__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableUseAccess().getRefAssignmentIDTerminalRuleCall_1_0_1(), semanticObject.eGet(MathPackage.Literals.VAR_USE__REF, false));
		feeder.finish();
	}
	
	
}
