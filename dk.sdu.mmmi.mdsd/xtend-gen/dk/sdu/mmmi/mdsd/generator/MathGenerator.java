/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import dk.sdu.mmmi.mdsd.math.Addition;
import dk.sdu.mmmi.mdsd.math.Division;
import dk.sdu.mmmi.mdsd.math.Expression;
import dk.sdu.mmmi.mdsd.math.Let;
import dk.sdu.mmmi.mdsd.math.MathExp;
import dk.sdu.mmmi.mdsd.math.Multiplication;
import dk.sdu.mmmi.mdsd.math.Subtraction;
import dk.sdu.mmmi.mdsd.math.VarUse;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathGenerator extends AbstractGenerator {
  private static Map<String, Integer> variables = new HashMap<String, Integer>();
  
  private static List<MathExp> linesToBeProcessed = new ArrayList<MathExp>();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Iterator<dk.sdu.mmmi.mdsd.math.Math> math = Iterators.<dk.sdu.mmmi.mdsd.math.Math>filter(resource.getAllContents(), dk.sdu.mmmi.mdsd.math.Math.class);
    boolean _hasNext = math.hasNext();
    if (_hasNext) {
      final dk.sdu.mmmi.mdsd.math.Math mathObj = math.next();
      final Consumer<MathExp> _function = (MathExp line) -> {
        MathGenerator.compute(line);
      };
      mathObj.getLines().forEach(_function);
      this.displayPanel(MathGenerator.variables);
    }
  }
  
  public static Map<String, Integer> compute(final dk.sdu.mmmi.mdsd.math.Math math) {
    Map<String, Integer> _xblockexpression = null;
    {
      HashMap<String, Integer> _hashMap = new HashMap<String, Integer>();
      MathGenerator.variables = _hashMap;
      EList<MathExp> _lines = math.getLines();
      ArrayList<MathExp> _arrayList = new ArrayList<MathExp>(_lines);
      MathGenerator.linesToBeProcessed = _arrayList;
      final Consumer<MathExp> _function = (MathExp line) -> {
        MathGenerator.compute(line);
      };
      math.getLines().forEach(_function);
      _xblockexpression = MathGenerator.variables;
    }
    return _xblockexpression;
  }
  
  public static void compute(final MathExp math) {
    boolean _contains = MathGenerator.linesToBeProcessed.contains(math);
    if (_contains) {
      MathGenerator.variables.put(math.getValue().getName(), Integer.valueOf(MathGenerator.computeExp(math.getValue().getExp(), MathGenerator.variables)));
      MathGenerator.linesToBeProcessed.remove(math);
    }
  }
  
  public static int computeExp(final Expression exp, final Map<String, Integer> vars) {
    try {
      Integer _switchResult = null;
      boolean _matched = false;
      if (exp instanceof Subtraction) {
        _matched=true;
        int _computeExp = MathGenerator.computeExp(((Subtraction)exp).getLeft(), vars);
        int _computeExp_1 = MathGenerator.computeExp(((Subtraction)exp).getRight(), vars);
        _switchResult = Integer.valueOf((_computeExp - _computeExp_1));
      }
      if (!_matched) {
        if (exp instanceof Addition) {
          _matched=true;
          int _computeExp = MathGenerator.computeExp(((Addition)exp).getLeft(), vars);
          int _computeExp_1 = MathGenerator.computeExp(((Addition)exp).getRight(), vars);
          _switchResult = Integer.valueOf((_computeExp + _computeExp_1));
        }
      }
      if (!_matched) {
        if (exp instanceof Multiplication) {
          _matched=true;
          int _computeExp = MathGenerator.computeExp(((Multiplication)exp).getLeft(), vars);
          int _computeExp_1 = MathGenerator.computeExp(((Multiplication)exp).getRight(), vars);
          _switchResult = Integer.valueOf((_computeExp * _computeExp_1));
        }
      }
      if (!_matched) {
        if (exp instanceof Division) {
          _matched=true;
          int _computeExp = MathGenerator.computeExp(((Division)exp).getLeft(), vars);
          int _computeExp_1 = MathGenerator.computeExp(((Division)exp).getRight(), vars);
          _switchResult = Integer.valueOf((_computeExp / _computeExp_1));
        }
      }
      if (!_matched) {
        if (exp instanceof dk.sdu.mmmi.mdsd.math.Number) {
          _matched=true;
          _switchResult = Integer.valueOf(((dk.sdu.mmmi.mdsd.math.Number)exp).getValue());
        }
      }
      if (!_matched) {
        if (exp instanceof VarUse) {
          _matched=true;
          Integer _xblockexpression = null;
          {
            String _name = ((VarUse)exp).getRef().getName();
            boolean _tripleEquals = (_name == null);
            if (_tripleEquals) {
              throw new Exception("The calculation references a variable, that points to null. This is likely a scoping issue");
            }
            Integer _xifexpression = null;
            boolean _containsKey = vars.containsKey(((VarUse)exp).getRef().getName());
            if (_containsKey) {
              _xifexpression = vars.get(((VarUse)exp).getRef().getName());
            } else {
              ArrayList<MathExp> _arrayList = new ArrayList<MathExp>(MathGenerator.linesToBeProcessed);
              for (final MathExp line : _arrayList) {
                String _name_1 = line.getValue().getName();
                String _name_2 = ((VarUse)exp).getRef().getName();
                boolean _equals = Objects.equal(_name_1, _name_2);
                if (_equals) {
                  MathGenerator.compute(line);
                  boolean _containsKey_1 = MathGenerator.variables.containsKey(((VarUse)exp).getRef().getName());
                  if (_containsKey_1) {
                    final Integer calculatedValue = MathGenerator.variables.get(((VarUse)exp).getRef().getName());
                    vars.put(((VarUse)exp).getRef().getName(), calculatedValue);
                    return (calculatedValue).intValue();
                  } else {
                    String _name_3 = ((VarUse)exp).getRef().getName();
                    String _plus = ("Adhoc calculation of " + _name_3);
                    String _plus_1 = (_plus + " did not add a value to the global variable");
                    throw new Exception(_plus_1);
                  }
                }
              }
              throw new Exception("The calculation references a variable, that is not in the list of MathExp");
            }
            _xblockexpression = _xifexpression;
          }
          _switchResult = _xblockexpression;
        }
      }
      if (!_matched) {
        if (exp instanceof Let) {
          _matched=true;
          int _xblockexpression = (int) 0;
          {
            final HashMap<String, Integer> localVars = new HashMap<String, Integer>(vars);
            localVars.put(((Let)exp).getValue().getName(), Integer.valueOf(MathGenerator.computeExp(((Let)exp).getValue().getExp(), localVars)));
            _xblockexpression = MathGenerator.computeExp(((Let)exp).getExp(), localVars);
          }
          _switchResult = Integer.valueOf(_xblockexpression);
        }
      }
      if (!_matched) {
        throw new Exception(("Unhandled expression: " + exp));
      }
      return (_switchResult).intValue();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * def static int computePrim(Number factor) SS{
   * 87
   * }
   */
  public void displayPanel(final Map<String, Integer> result) {
    String resultString = "";
    Set<Map.Entry<String, Integer>> _entrySet = result.entrySet();
    for (final Map.Entry<String, Integer> entry : _entrySet) {
      String _resultString = resultString;
      String _key = entry.getKey();
      String _plus = ("var " + _key);
      String _plus_1 = (_plus + " = ");
      Integer _value = entry.getValue();
      String _plus_2 = (_plus_1 + _value);
      String _plus_3 = (_plus_2 + "\n");
      resultString = (_resultString + _plus_3);
    }
  }
}
