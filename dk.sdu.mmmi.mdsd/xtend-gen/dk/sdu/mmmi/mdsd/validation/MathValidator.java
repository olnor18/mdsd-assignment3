/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.validation;

import com.google.common.base.Objects;
import dk.sdu.mmmi.mdsd.math.MathExp;
import dk.sdu.mmmi.mdsd.math.MathPackage;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class MathValidator extends AbstractMathValidator {
  public static final String DUPLICATE_NAME = "duplicateName";
  
  @Check
  public void cannotReasignGlobalVar(final MathExp mathexp) {
    final dk.sdu.mmmi.mdsd.math.Math root = EcoreUtil2.<dk.sdu.mmmi.mdsd.math.Math>getContainerOfType(mathexp, dk.sdu.mmmi.mdsd.math.Math.class);
    final Function1<MathExp, Boolean> _function = (MathExp it) -> {
      return Boolean.valueOf(((it != mathexp) && Objects.equal(it.getValue().getName(), mathexp.getValue().getName())));
    };
    int _size = IterableExtensions.size(IterableExtensions.<MathExp>filter(root.getLines(), _function));
    boolean _greaterThan = (_size > 0);
    if (_greaterThan) {
      this.error("Cannot assign global variable with same name", 
        MathPackage.Literals.MATH_EXP__VALUE, 
        MathValidator.DUPLICATE_NAME);
    }
  }
}
