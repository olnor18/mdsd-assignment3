/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import dk.sdu.mmmi.mdsd.math.*
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.EcoreUtil2
import dk.sdu.mmmi.mdsd.math.Let

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MathScopeProvider extends AbstractMathScopeProvider {
        
        override getScope(EObject context, EReference reference) {
        	if (context instanceof Var){
        		val let = EcoreUtil2.getContainerOfType(context, Let)
        		if (let !== null){
        			return Scopes.scopeFor(newArrayList(let.value), let.higherLetScope(context))
        		}
        		return context.scopeForVar
        	}
            return super.getScope(context, reference);
        }
        
        def IScope higherLetScope(Let let, EObject context){
        	val nextLet = EcoreUtil2.getContainerOfType(let.eContainer, Let)
    		if (nextLet !== null){
    			return Scopes.scopeFor(newArrayList(nextLet.eContainer), nextLet.higherLetScope(context))
    		}
    		return context.scopeForVar
        }
        
        def IScope getScopeForVar(EObject context){
        	val currentVar = EcoreUtil2.getContainerOfType(context, MathExp)
        	val root = EcoreUtil2.getContainerOfType(context, Math)
        	val variables = EcoreUtil2.getAllContentsOfType(root, MathExp)
        	variables.remove(currentVar)
        	return Scopes.scopeFor(variables)
        }
}
