/*
 * generated by Xtext 2.25.0
 */
grammar InternalMath;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package dk.sdu.mmmi.mdsd.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package dk.sdu.mmmi.mdsd.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import dk.sdu.mmmi.mdsd.services.MathGrammarAccess;

}
@parser::members {
	private MathGrammarAccess grammarAccess;

	public void setGrammarAccess(MathGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMathExp
entryRuleMathExp
:
{ before(grammarAccess.getMathExpRule()); }
	 ruleMathExp
{ after(grammarAccess.getMathExpRule()); } 
	 EOF 
;

// Rule MathExp
ruleMathExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMathExpAccess().getGroup()); }
		(rule__MathExp__Group__0)
		{ after(grammarAccess.getMathExpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExp
entryRuleExp
:
{ before(grammarAccess.getExpRule()); }
	 ruleExp
{ after(grammarAccess.getExpRule()); } 
	 EOF 
;

// Rule Exp
ruleExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpAccess().getSubtractionExpParserRuleCall()); }
		ruleSubtractionExp
		{ after(grammarAccess.getExpAccess().getSubtractionExpParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubtractionExp
entryRuleSubtractionExp
:
{ before(grammarAccess.getSubtractionExpRule()); }
	 ruleSubtractionExp
{ after(grammarAccess.getSubtractionExpRule()); } 
	 EOF 
;

// Rule SubtractionExp
ruleSubtractionExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubtractionExpAccess().getGroup()); }
		(rule__SubtractionExp__Group__0)
		{ after(grammarAccess.getSubtractionExpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdditionExp
entryRuleAdditionExp
:
{ before(grammarAccess.getAdditionExpRule()); }
	 ruleAdditionExp
{ after(grammarAccess.getAdditionExpRule()); } 
	 EOF 
;

// Rule AdditionExp
ruleAdditionExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionExpAccess().getGroup()); }
		(rule__AdditionExp__Group__0)
		{ after(grammarAccess.getAdditionExpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDivisionExp
entryRuleDivisionExp
:
{ before(grammarAccess.getDivisionExpRule()); }
	 ruleDivisionExp
{ after(grammarAccess.getDivisionExpRule()); } 
	 EOF 
;

// Rule DivisionExp
ruleDivisionExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDivisionExpAccess().getGroup()); }
		(rule__DivisionExp__Group__0)
		{ after(grammarAccess.getDivisionExpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicationExp
entryRuleMultiplicationExp
:
{ before(grammarAccess.getMultiplicationExpRule()); }
	 ruleMultiplicationExp
{ after(grammarAccess.getMultiplicationExpRule()); } 
	 EOF 
;

// Rule MultiplicationExp
ruleMultiplicationExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationExpAccess().getGroup()); }
		(rule__MultiplicationExp__Group__0)
		{ after(grammarAccess.getMultiplicationExpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParenthesis
entryRuleParenthesis
:
{ before(grammarAccess.getParenthesisRule()); }
	 ruleParenthesis
{ after(grammarAccess.getParenthesisRule()); } 
	 EOF 
;

// Rule Parenthesis
ruleParenthesis 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParenthesisAccess().getGroup()); }
		(rule__Parenthesis__Group__0)
		{ after(grammarAccess.getParenthesisAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumber
entryRuleNumber
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberAccess().getValueAssignment()); }
		(rule__Number__ValueAssignment)
		{ after(grammarAccess.getNumberAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableUse
entryRuleVariableUse
:
{ before(grammarAccess.getVariableUseRule()); }
	 ruleVariableUse
{ after(grammarAccess.getVariableUseRule()); } 
	 EOF 
;

// Rule VariableUse
ruleVariableUse 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableUseAccess().getRefAssignment()); }
		(rule__VariableUse__RefAssignment)
		{ after(grammarAccess.getVariableUseAccess().getRefAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLet
entryRuleLet
:
{ before(grammarAccess.getLetRule()); }
	 ruleLet
{ after(grammarAccess.getLetRule()); } 
	 EOF 
;

// Rule Let
ruleLet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLetAccess().getGroup()); }
		(rule__Let__Group__0)
		{ after(grammarAccess.getLetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getNumberParserRuleCall_0()); }
		ruleNumber
		{ after(grammarAccess.getPrimaryAccess().getNumberParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getParenthesisParserRuleCall_1()); }
		ruleParenthesis
		{ after(grammarAccess.getPrimaryAccess().getParenthesisParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getVariableUseParserRuleCall_2()); }
		ruleVariableUse
		{ after(grammarAccess.getPrimaryAccess().getVariableUseParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getLetParserRuleCall_3()); }
		ruleLet
		{ after(grammarAccess.getPrimaryAccess().getLetParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MathExp__Group__0__Impl
	rule__MathExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMathExpAccess().getVarKeyword_0()); }
	'var'
	{ after(grammarAccess.getMathExpAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MathExp__Group__1__Impl
	rule__MathExp__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMathExpAccess().getNameAssignment_1()); }
	(rule__MathExp__NameAssignment_1)
	{ after(grammarAccess.getMathExpAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExp__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MathExp__Group__2__Impl
	rule__MathExp__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExp__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMathExpAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getMathExpAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExp__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MathExp__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExp__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMathExpAccess().getExpAssignment_3()); }
	(rule__MathExp__ExpAssignment_3)
	{ after(grammarAccess.getMathExpAccess().getExpAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubtractionExp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubtractionExp__Group__0__Impl
	rule__SubtractionExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractionExp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubtractionExpAccess().getAdditionExpParserRuleCall_0()); }
	ruleAdditionExp
	{ after(grammarAccess.getSubtractionExpAccess().getAdditionExpParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractionExp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubtractionExp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractionExp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubtractionExpAccess().getGroup_1()); }
	(rule__SubtractionExp__Group_1__0)*
	{ after(grammarAccess.getSubtractionExpAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubtractionExp__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubtractionExp__Group_1__0__Impl
	rule__SubtractionExp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractionExp__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubtractionExpAccess().getHyphenMinusKeyword_1_0()); }
	'-'
	{ after(grammarAccess.getSubtractionExpAccess().getHyphenMinusKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractionExp__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubtractionExp__Group_1__1__Impl
	rule__SubtractionExp__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractionExp__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubtractionExpAccess().getSubtractioLeftAction_1_1()); }
	()
	{ after(grammarAccess.getSubtractionExpAccess().getSubtractioLeftAction_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractionExp__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubtractionExp__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractionExp__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubtractionExpAccess().getRightAssignment_1_2()); }
	(rule__SubtractionExp__RightAssignment_1_2)
	{ after(grammarAccess.getSubtractionExpAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionExp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionExp__Group__0__Impl
	rule__AdditionExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionExpAccess().getDivisionExpParserRuleCall_0()); }
	ruleDivisionExp
	{ after(grammarAccess.getAdditionExpAccess().getDivisionExpParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionExp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionExpAccess().getGroup_1()); }
	(rule__AdditionExp__Group_1__0)*
	{ after(grammarAccess.getAdditionExpAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionExp__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionExp__Group_1__0__Impl
	rule__AdditionExp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExp__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionExpAccess().getPlusSignKeyword_1_0()); }
	'+'
	{ after(grammarAccess.getAdditionExpAccess().getPlusSignKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExp__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionExp__Group_1__1__Impl
	rule__AdditionExp__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExp__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionExpAccess().getAdditionLeftAction_1_1()); }
	()
	{ after(grammarAccess.getAdditionExpAccess().getAdditionLeftAction_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExp__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionExp__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExp__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionExpAccess().getRightAssignment_1_2()); }
	(rule__AdditionExp__RightAssignment_1_2)
	{ after(grammarAccess.getAdditionExpAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DivisionExp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DivisionExp__Group__0__Impl
	rule__DivisionExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionExp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionExpAccess().getMultiplicationExpParserRuleCall_0()); }
	ruleMultiplicationExp
	{ after(grammarAccess.getDivisionExpAccess().getMultiplicationExpParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionExp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DivisionExp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionExp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionExpAccess().getGroup_1()); }
	(rule__DivisionExp__Group_1__0)*
	{ after(grammarAccess.getDivisionExpAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DivisionExp__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DivisionExp__Group_1__0__Impl
	rule__DivisionExp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionExp__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionExpAccess().getSolidusKeyword_1_0()); }
	'/'
	{ after(grammarAccess.getDivisionExpAccess().getSolidusKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionExp__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DivisionExp__Group_1__1__Impl
	rule__DivisionExp__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionExp__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionExpAccess().getDivisionLeftAction_1_1()); }
	()
	{ after(grammarAccess.getDivisionExpAccess().getDivisionLeftAction_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionExp__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DivisionExp__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionExp__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionExpAccess().getRightAssignment_1_2()); }
	(rule__DivisionExp__RightAssignment_1_2)
	{ after(grammarAccess.getDivisionExpAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationExp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationExp__Group__0__Impl
	rule__MultiplicationExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationExpAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getMultiplicationExpAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationExp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationExpAccess().getGroup_1()); }
	(rule__MultiplicationExp__Group_1__0)*
	{ after(grammarAccess.getMultiplicationExpAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationExp__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationExp__Group_1__0__Impl
	rule__MultiplicationExp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExp__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationExpAccess().getAsteriskKeyword_1_0()); }
	'*'
	{ after(grammarAccess.getMultiplicationExpAccess().getAsteriskKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExp__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationExp__Group_1__1__Impl
	rule__MultiplicationExp__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExp__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationExpAccess().getMultiplicationLeftAction_1_1()); }
	()
	{ after(grammarAccess.getMultiplicationExpAccess().getMultiplicationLeftAction_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExp__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationExp__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExp__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationExpAccess().getRightAssignment_1_2()); }
	(rule__MultiplicationExp__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplicationExpAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parenthesis__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parenthesis__Group__0__Impl
	rule__Parenthesis__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parenthesis__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesisAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getParenthesisAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parenthesis__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parenthesis__Group__1__Impl
	rule__Parenthesis__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parenthesis__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesisAccess().getSubtractionExpParserRuleCall_1()); }
	ruleSubtractionExp
	{ after(grammarAccess.getParenthesisAccess().getSubtractionExpParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parenthesis__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parenthesis__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parenthesis__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesisAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getParenthesisAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Let__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Let__Group__0__Impl
	rule__Let__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetAccess().getLetKeyword_0()); }
	'let'
	{ after(grammarAccess.getLetAccess().getLetKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Let__Group__1__Impl
	rule__Let__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetAccess().getNameAssignment_1()); }
	(rule__Let__NameAssignment_1)
	{ after(grammarAccess.getLetAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Let__Group__2__Impl
	rule__Let__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getLetAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Let__Group__3__Impl
	rule__Let__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetAccess().getAssigmentAssignment_3()); }
	(rule__Let__AssigmentAssignment_3)
	{ after(grammarAccess.getLetAccess().getAssigmentAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Let__Group__4__Impl
	rule__Let__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetAccess().getInKeyword_4()); }
	'in'
	{ after(grammarAccess.getLetAccess().getInKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Let__Group__5__Impl
	rule__Let__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetAccess().getExpAssignment_5()); }
	(rule__Let__ExpAssignment_5)
	{ after(grammarAccess.getLetAccess().getExpAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Let__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetAccess().getEndKeyword_6()); }
	'end'
	{ after(grammarAccess.getLetAccess().getEndKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MathExp__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMathExpAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMathExpAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExp__ExpAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMathExpAccess().getExpSubtractionExpParserRuleCall_3_0()); }
		ruleSubtractionExp
		{ after(grammarAccess.getMathExpAccess().getExpSubtractionExpParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractionExp__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubtractionExpAccess().getRightAdditionExpParserRuleCall_1_2_0()); }
		ruleAdditionExp
		{ after(grammarAccess.getSubtractionExpAccess().getRightAdditionExpParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExp__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionExpAccess().getRightDivisionExpParserRuleCall_1_2_0()); }
		ruleDivisionExp
		{ after(grammarAccess.getAdditionExpAccess().getRightDivisionExpParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionExp__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDivisionExpAccess().getRightMultiplicationExpParserRuleCall_1_2_0()); }
		ruleMultiplicationExp
		{ after(grammarAccess.getDivisionExpAccess().getRightMultiplicationExpParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExp__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationExpAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getMultiplicationExpAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableUse__RefAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableUseAccess().getRefMathExpCrossReference_0()); }
		(
			{ before(grammarAccess.getVariableUseAccess().getRefMathExpIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVariableUseAccess().getRefMathExpIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getVariableUseAccess().getRefMathExpCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLetAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getLetAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__AssigmentAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLetAccess().getAssigmentPrimaryParserRuleCall_3_0()); }
		rulePrimary
		{ after(grammarAccess.getLetAccess().getAssigmentPrimaryParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__ExpAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLetAccess().getExpExpParserRuleCall_5_0()); }
		ruleExp
		{ after(grammarAccess.getLetAccess().getExpExpParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
