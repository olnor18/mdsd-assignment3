/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.mmmi.mdsd.math.MathExp
import java.util.Map
import java.util.HashMap
import dk.sdu.mmmi.mdsd.math.*
import java.util.Collections
import java.util.List
import java.util.Comparator
import java.util.ArrayList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathGenerator extends AbstractGenerator {

	static Map<String, Integer> variables = new HashMap();
	static List<MathExp> linesToBeProcessed = new ArrayList();
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val math = resource.allContents.filter(Math)
		if (math.hasNext){
			val mathObj = math.next
			mathObj.lines.forEach[line|
				line.compute
				variables.displayPanel
			]
		}
	}
	
	//
	// Compute function: computes value of expression
	// Note: written according to illegal left-recursive grammar, requires fix
	//
	
	def static compute(Math math) { 
		variables = new HashMap();
		/*val prioritizeConstsSort = new Comparator<MathExp>(){
			
			override compare(MathExp arg0, MathExp arg1) {
				if (arg0.value.exp instanceof Number){
					-1
				} else if (arg1.value.exp instanceof Number){
					1
				} else {
					0
				}
			}
			
		}
		val sortedLines = math.lines.sortWith(prioritizeConstsSort)*/
		linesToBeProcessed=new ArrayList(math.lines)
		math.lines.forEach[line|
				line.compute
		]
		variables
	}
	
	def static void compute(MathExp math) {
		if (linesToBeProcessed.contains(math)){
			variables.put(math.value.name, math.value.exp.computeExp(variables))
			linesToBeProcessed.remove(math)
		}
	}
	
	def static int computeExp(Expression exp, Map<String, Integer> vars) {
		switch exp {
			Subtraction: exp.left.computeExp(vars)-exp.right.computeExp(vars)
			Addition: exp.left.computeExp(vars)+exp.right.computeExp(vars)
			Multiplication: exp.left.computeExp(vars)*exp.right.computeExp(vars)
			Division: exp.left.computeExp(vars)/exp.right.computeExp(vars)
			Number: exp.value
			Var: {
					if(vars.containsKey(exp.ref.name)){
						vars.get(exp.ref.name)
					} else {
						for (MathExp line : new ArrayList(linesToBeProcessed)){
							if (line.value.name == exp.ref.name){
								line.compute
								if(vars.containsKey(exp.ref.name)){
									return vars.get(exp.ref.name)
								}
							}
						}
						return 0
					}
				}
			Let: {
				val localVars = new HashMap(vars);
				localVars.put(exp.value.name, exp.value.exp.computeExp(localVars))
				exp.exp.computeExp(localVars)
			}
			default: throw new Exception("Unhandled expression: " + exp)
		}
	}
	
	/*def static int computePrim(Number factor) SS{ 
		87
	}*/

	def void displayPanel(Map<String, Integer> result) {
		/*var resultString = ""
		for (entry : result.entrySet()) {
         	resultString += "var " + entry.getKey() + " = " + entry.getValue() + "\n"
        }
		
		JOptionPane.showMessageDialog(null, resultString ,"Math Language", JOptionPane.INFORMATION_MESSAGE)*/
	}

}
