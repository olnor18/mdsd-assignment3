/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import dk.sdu.mmmi.mdsd.math.*
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.EcoreUtil2

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MathScopeProvider extends AbstractMathScopeProvider {
        
        override getScope(EObject context, EReference reference) {
        	if (context instanceof Var){
        		val let = EcoreUtil2.getContainerOfType(context, Let)
        		if (let !== null){
        			return Scopes.scopeFor(newArrayList(context.eContainer), let.higherLetScope)
        		}
        		return context.scopeForVar
        	}
            return super.getScope(context, reference);
        }
        
        def IScope getHigherLetScope(Let let){
        	
        }
        
        def IScope getScopeForVar(EObject context){
        	switch (context){
        		Let: {
        			Scopes.scopeFor(newArrayList(context.eContainer))
    			}
        		Math: {
        			Scopes.scopeFor(context.lines.filter[it != context])
    			}
        		default: context.eContainer.getScopeForVar
        	}
        }
}
